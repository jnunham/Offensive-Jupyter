from neo4j import GraphDatabase
import pandas as pd

# -----------------------------
# Neo4j Connection
# -----------------------------
uri = "bolt://localhost:7687"
username = "neo4j"
password = "neo4j"

driver = GraphDatabase.driver(uri, auth=(username, password))

# -----------------------------
# Query for Kerberoastable Users
# -----------------------------
query = """
MATCH (u:User)
WHERE size(u.serviceprincipalnames) > 0 AND u.enabled = true

OPTIONAL MATCH (u)-[:MemberOf*1..]->(g:Group)
WHERE toLower(g.name) IN ["domain admins@example.com", "enterprise admins@example.com", "schema admins@example.com"]

RETURN DISTINCT
    u.name AS SAMAccountName,
    u.serviceprincipalnames AS SPNs,
    CASE WHEN g IS NULL THEN false ELSE true END AS HighPrivGroupMember,
    collect(DISTINCT g.name) AS HighPrivGroups
ORDER BY HighPrivGroupMember DESC, u.name
"""

# Run the query against your BloodHound/Neo4j instance
df_query = run_query(query)

# Optional: export to CSV for further analysis
df_query.to_csv("kerberoastable-users.csv", index=False)

# Display first 50 results
df_query.head(50)
